  * tipos de imports:
 modulos: import myModule from 'myModule'
 archivos: import myFile from './path'

 imports:
 - express 
 - archivos a relacionar con el server

 notesManager es instancia de NotesManager 
 sobre ella se pueden ejecutar todos las funciones
 - read() | readOne() | create() | destroy()
 


ARMO EL SERVER:

 - var SERVER, asigno la ejecución del modulo express.

 - var PORT, asigno num para puerto.
 - func READY con mensaje para cuando se activa el server.

 - meth LISTEN() sobre server para activar el server.
     . requiere PORT y callback READY para cuando se ejecuta.


MIDDLEWARES
 intermediarios entre REQ y RES
 - URLENCODED permite leer datos complejos dentro de la URL y para facilitar la respuesta a dar.


ROUTER

- server.GET() inicial para conectar con el server. (solo chequea si la conexión es exitosa)
     . GET() toma 2 argumentos: 
         . path (endpoint de la url) 
         . async func (req, res) ... toma de argumento los variable request y variable response... ejecuta codigo uno o ambos de ellos.

         * req represents the HTTP request that the server receives from the client. The req object contains various properties and methods that provide information about the incoming request, such as request headers, request parameters, query parameters, request body, etc *

         * RES contiene un CÓDIGO DE ESTADO, y luego envía data en formato JSON, puede contener mensajes, variables... siempre dentro contendrá un success: boolean.

    - try:
       . return res.status de exito y se arma el json con la respuesta (lo que se muestra en el navegador.)
    - catch:
       . consologueo error
       . return res.status de error y se arma el json con la respuesta.




- LEER NOTAS

 - server.GET() con endpoint /api/notes
   
  - try:
      . var allNotes, le asigno la  ejecución del read() del notesManager.
      . si existe, return cod status de exito y se arma la respuesta en json.
      . si no, se genera error, se le asigna codigo de estado 404, se tira.
  - catch:
      . se consologuea el error, cod status de error y se arma la respuesta en json.

adicional filtro:
  * introducimos category como filtro, por eso se desestructura sobre req.query, y se pasa como param en el read*
   .req.query remite al query de la request, el ahondamiento particular sobre el endpoint. {category} = req.query remite a /api/notes?category y sus posibles ahondamientos.
   . al desestructurarlo estoy extrayendo category y el valor que contenga... como category=done... y se guarda en la variable category para ser usado.
   .son opcionales, por lo que se introducen por fuera de la url para ser ejecutados si se llaman, y bypassearse si no.
   

  
- LEER UNA NOTA

 - server.GET() con endpoint /api/notes/:id
   . el : prepara el endpoint para ser variable.
   . necesitamos que lo sea, porque cada nota tiene un ID puntual.
  
  - try:
    - desestructuramos id del req.params... "extraemos" el valor y se guarda en variable ID
    - var selected asignada a la ejecución del readOne() tomando ID como prop.
     . si existe selected, return status de exito y se arma el json con la respuesta
     . si no existe, se arma error, err.status de error, se tira
  - catch:
    . consologueo err
    . var statusCode con el statusCode del err, o por defecto 500.
    . return res.status con statusCode y se arma el json con la respuesta.




- CREAR NOTAS
  es bastante deforme hacerlo con get, pero por ahora es asi.
  esto funciona para crear introduciendo la data en la url.

 -server.GET() con endpoint /api/notes/:text/:category
   . text y category son variables (:)

 - try:
   . desestructuro text y category del req.params
   . var data y le asigno el valor de text y category 
   . var newNote asignada a la ejecución de create() usando data como prop.
   . return res.status de exito y armo el json con la respuesta.

 - catch:
   . consologueo el error
   . return res.status de error y armo el json con la respuesta.



     
